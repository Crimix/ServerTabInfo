buildscript {
    repositories {
        jcenter()
        maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.10'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'eclipse'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

ext.priv = parseConfig(file('private.properties'))

version = version_major + '.' + version_minor + '.' + version_patch
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_archivesBaseName + "-" + mcversion

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    version = mcversion + "-" + forge_version
    mappings channel: 'snapshot', version: '20180921-1.13'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('eclipse/assets').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('eclipse/assets').canonicalPath
            source sourceSets.main
        }
    }
}

repositories {
  maven {
    // location of the maven that hosts JEI files
    name = "Progwml6 maven"
    url = "http://dvs1.progwml6.com/files/maven"
  }
  maven {
    // location of a maven mirror for JEI files, as a fallback
    name = "ModMaven"
    url = "modmaven.k-4u.nl"
  }
}

dependencies {

	minecraft([
		group  : "${project.forge_group}",
		name   : "forge",
		version: "${project.mcversion}-${project.forge_version}"
	])

}

jar {
    manifest {
        attributes(["Specification-Title": "examplemod",
                    "Specification-Vendor": "examplemodsareus",
                    "Specification-Version": "24.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"examplemodsareus",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

curseforge {
  apiKey = priv.apiKey
  project {
    id = '291788'
    changelogType = 'markdown'
	changelog = file('changelog.txt')
    releaseType = 'release'
    addGameVersion 'Java 8'
    addGameVersion '1.12'
    addGameVersion '1.12.1'
    addGameVersion '1.12.2'
  }
}

task clearChangelog() {
	doLast{
		clearFile(file('changelog.txt'))
	}
}


def clearFile(File f) {
    f.withWriter  {
    	writer -> writer.write('')
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}
