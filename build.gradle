buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
		maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
      		url "https://plugins.gradle.org/m2/"
    	}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
        classpath "net.saliman:gradle-properties-plugin:1.5.1"
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'net.saliman.properties'
apply plugin: 'idea'
apply plugin: 'java'

version = version_major + '.' + version_minor + '.' + version_patch
group = "${mod_group}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_archivesBaseName + "-" + mc_version

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
})

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: "${project.mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                ServerTabInfo {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                ServerTabInfo {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'servertabinfo', '--all', '--output', file('src/main/generated_resources'), '--existing', file('src/main/resources/')

            mods {
                ServerTabInfo  {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/main/generated_resources' }

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/crimix/bml")
        credentials {
            username = githubUser
            password = githubToken
        }
        content {
            includeGroup "com.black_dog20.bml"
        }
    }
    mavenLocal()
}

configurations {
    shadowCompileOnly
    compileOnly.extendsFrom(shadowCompileOnly)
    runtimeMod { transitive = false }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    compileOnly fg.deobf("curse.maven:jade-324717:${jade_version}")
    runtimeMod fg.deobf("curse.maven:jade-324717:${jade_version}")
    shadowCompileOnly fg.deobf("com.black_dog20.bml:bml:${bml_version}")
    runtimeMod fg.deobf("com.black_dog20.bml:bml:${bml_version}")

    implementation('cpw.mods:securejarhandler') { version { strictly '0.9.45' } }
}

//So long as the Invalid module name: '1' is not a Java identifier problem exists, this is a workaround
//We use a custom configuration runtimeMod
project.afterEvaluate {
    task copyMods(type:Copy) {
        from configurations.runtimeMod.files
        into file("run/mods")
    }

    tasks.forEach {
        if (it.name.startsWith("prepareRun"))
            it.dependsOn copyMods
    }
}

jar {
    manifest {
        attributes(["Specification-Title": "servertabinfo",
                    "Specification-Vendor": "black_dog20",
                    "Specification-Version": "1",  // We are version 1 of ourselves
                    "Implementation-Title": "Server Tab Info",
                    "Implementation-Version": archiveVersion.get(),
                    "Implementation-Vendor" :"black_dog20",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCompileOnly]
    exclude 'com/black_dog20/bml/Bml.class'
    exclude 'com/black_dog20/bml/internal/**'
    exclude 'assets/blackdogsmoddinglibrary/**'
    exclude 'bml-logo.png'
    exclude 'bml.mixins.json'
    exclude 'bml.refmap.json'
    minimize()
    relocate 'com.black_dog20.bml', 'com.black_dog20.servertabinfo.repack.bml'


    classifier '' // Replace the default jar
}

reobf {
    shadowJar {}
}

// this replaces jar.finalizedBy('reobfJar') in the standard forge mod buildscript
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

curseforge {
    apiKey = curseApiKey
    project {
        id = '291788'
        changelogType = 'markdown'
        changelog = 'As always find the changelog here [CHANGELOG](https://github.com/Crimix/ServerTabInfo/blob/1.17/CHANGELOG.md)'
        releaseType = 'beta'
        addGameVersion 'Forge'
        addGameVersion 'Java 16'
        addGameVersion '1.17.1'
        relations {
            optionalDependency 'permission-levels'
        }
    }
}
